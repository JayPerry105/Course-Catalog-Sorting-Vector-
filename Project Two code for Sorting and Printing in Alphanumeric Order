// Jacob Perry - SNHU CS300 DS&A Project Two - 6/14/2023

#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <algorithm>

// Allows each course a course id, name, and vector for multiple prerequisuites
struct Course {
    std::string code;
    std::string name;
    std::vector<std::string> prerequisites;
};

bool compareCourses(const Course& c1, const Course& c2) {
    return c1.code < c2.code;
}

// Takes full filepath/name input by the user an parses it by separating data via commas in the csv file
std::vector<Course> loadCoursesFromFile(const std::string& filename) {
    std::vector<Course> courses;
    std::ifstream file(filename);

    if (!file) {
        std::cout << "Error opening file.\n";
        return courses;
    }

    std::string line;
    while (std::getline(file, line)) {
        std::stringstream ss(line);
        Course course;
        std::getline(ss, course.code, ',');
        std::getline(ss, course.name, ',');

        std::string prerequisite;
        while (std::getline(ss, prerequisite, ',')) {
            if (!prerequisite.empty()) {
                course.prerequisites.push_back(prerequisite);
            }
        }

        courses.push_back(course);
    }

    file.close();

    return courses;
}

// Prints each course with its corresponding id, name, and prerequisites (if any)
void printCourseList(const std::vector<Course>& courses) {
    std::cout << "Course List:\n";
    for (const auto& course : courses) {
        std::cout << "Course Code: " << course.code << '\n';
        std::cout << "Course Name: " << course.name << '\n';
        std::cout << "Prerequisites: ";
        if (course.prerequisites.empty()) {
            std::cout << "None";
        }
        else {
            for (const auto& prereq : course.prerequisites) {
                std::cout << prereq << ' ';
            }
        }
        std::cout << "\n\n";
    }
}

// prints a specific course's id, name, and prerequisuites based upon user input to select a course from the list
void printCourse(const std::vector<Course>& courses, const std::string& courseCode) {
    std::string uppercaseCourseCode;
    for (char c : courseCode) {
        uppercaseCourseCode += std::toupper(c); // converts user input to uppercase to match course id
    }

    auto it = std::find_if(courses.begin(), courses.end(), [&](const Course& course) {
        std::string uppercaseCode;
        for (char c : course.code) {
            uppercaseCode += std::toupper(c);
        }
        return uppercaseCode == uppercaseCourseCode;
        });

    if (it != courses.end()) {
        std::cout << "Course Code: " << it->code << '\n';
        std::cout << "Course Name: " << it->name << '\n';
        std::cout << "Prerequisites: ";
        if (it->prerequisites.empty()) {
            std::cout << "None";
        }
        else {
            for (const auto& prereq : it->prerequisites) {
                std::cout << prereq << ' ';
            }
        }
        std::cout << '\n' << '\n';
    }
    // lets user know if input does not match any course name
    else {
        std::cout << "Course not found.\n";
    }
}

int main() {
    std::vector<Course> courses;
    std::string filename;

    while (true) {
        std::cout << "Menu Options:\n";
        std::cout << "1. Load Data Structure\n";
        std::cout << "2. Print Course List\n";
        std::cout << "3. Print Course\n";
        std::cout << "4. Exit\n\n";
        std::cout << "Enter your choice: ";

        int choice;
        std::cin >> choice;

        switch (choice) {
        case 1:
            std::cout << "Enter the full path and file name: ";
            std::cin >> filename;
            courses = loadCoursesFromFile(filename);
            break;
        case 2:
            if (courses.empty()) {
                std::cout << "Data structure is not loaded. Please load the data first.\n";
            }
            else {
                std::sort(courses.begin(), courses.end(), compareCourses);
                printCourseList(courses);
            }
            break;
        case 3:
            if (courses.empty()) {
                std::cout << "Data structure is not loaded. Please load the data first.\n";
            }
            else {
                std::string courseCode;
                std::cout << "Enter the course code: ";
                std::cin >> courseCode;
                printCourse(courses, courseCode);
            }
            break;
        case 4:
            std::cout << "Exiting the program. Thank you for using our planner!\n";
            return 0;
        default:
            std::cout << "Invalid choice. Please enter a valid option.\n";
            break;
        }
    }
    return 0;
}
