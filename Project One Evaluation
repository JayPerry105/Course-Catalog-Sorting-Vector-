While there are many advantages and disadvantages of all data structures, I will focus on vectors, hash tables, and trees. Vectors are advantageous due to their accessibility via indices, allowing for faster searching. Iteration and traversal are also very straightforward. Their dynamic resizing is also a huge benefit. A disadvantage becomes apparent when inserting and deleting elements. When an element is inserted or deleted, all subsequent elements must be shifted accordingly, costing valuable time. Vectors are also inefficient for very large data sets. 

Hash tables offer fast retrieval with constant-time complexity for key-based retrieval. They support a wide range of key types, allowing flexibility in data. Efficient insertions and deletions make hash tables a good choice for dynamic data updates. Additionally, hash tables can dynamically resize to accommodate varying numbers of elements. Hash collisions can occur when different keys produce the same hash value, potentially impacting performance. Another drawback is the lack of ordering in hash tables, which may be undesirable in certain scenarios. Comparatively, hash table operations are slightly slower than vector operations due to the additional steps involved. 

Trees offer efficient searching, particularly binary search trees. They maintain the order of elements, enabling ordered traversal. Trees have a dynamic structure that allows easy insertion and deletion of nodes while preserving their relationships. Trees have some drawbacks. They require additional memory to store the tree nodes and their relationships. Compared to vectors, trees are slower for random access operations as they involve more comparisons. Implementing and maintaining tree data structures can be more complex than vectors or hash tables. Lastly, trees lack direct indexing or random access support, unlike vectors. 

With all of this being said, I am recommending the use of a vector for this assignment. Along with the total runtime cost being lower than the other two data structures, the additional steps and complexity of the others lead me to believe a vector is best suited for a simple operation like this. Being able to quickSort the entire course list is extremely valuable. In my opinion, this makes up for any time that may be lost in a search function. 
